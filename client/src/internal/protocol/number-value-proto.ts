// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class NumberValueProto {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):NumberValueProto {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNumberValueProto(bb:flatbuffers.ByteBuffer, obj?:NumberValueProto):NumberValueProto {
  return (obj || new NumberValueProto()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNumberValueProto(bb:flatbuffers.ByteBuffer, obj?:NumberValueProto):NumberValueProto {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NumberValueProto()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startNumberValueProto(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat64(0, value, 0.0);
}

static endNumberValueProto(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNumberValueProto(builder:flatbuffers.Builder, value:number):flatbuffers.Offset {
  NumberValueProto.startNumberValueProto(builder);
  NumberValueProto.addValue(builder, value);
  return NumberValueProto.endNumberValueProto(builder);
}
}
