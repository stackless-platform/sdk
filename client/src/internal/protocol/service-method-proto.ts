// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MethodArgumentProto } from './method-argument-proto.js';


export class ServiceMethodProto {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ServiceMethodProto {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServiceMethodProto(bb:flatbuffers.ByteBuffer, obj?:ServiceMethodProto):ServiceMethodProto {
  return (obj || new ServiceMethodProto()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServiceMethodProto(bb:flatbuffers.ByteBuffer, obj?:ServiceMethodProto):ServiceMethodProto {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServiceMethodProto()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

methodId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

methodName():string|null
methodName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
methodName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

arguments(index: number, obj?:MethodArgumentProto):MethodArgumentProto|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new MethodArgumentProto()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

argumentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

returnType():string|null
returnType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
returnType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startServiceMethodProto(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMethodId(builder:flatbuffers.Builder, methodId:number) {
  builder.addFieldInt16(0, methodId, 0);
}

static addMethodName(builder:flatbuffers.Builder, methodNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, methodNameOffset, 0);
}

static addArguments(builder:flatbuffers.Builder, argumentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, argumentsOffset, 0);
}

static createArgumentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startArgumentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReturnType(builder:flatbuffers.Builder, returnTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, returnTypeOffset, 0);
}

static endServiceMethodProto(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // method_name
  return offset;
}

static createServiceMethodProto(builder:flatbuffers.Builder, methodId:number, methodNameOffset:flatbuffers.Offset, argumentsOffset:flatbuffers.Offset, returnTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  ServiceMethodProto.startServiceMethodProto(builder);
  ServiceMethodProto.addMethodId(builder, methodId);
  ServiceMethodProto.addMethodName(builder, methodNameOffset);
  ServiceMethodProto.addArguments(builder, argumentsOffset);
  ServiceMethodProto.addReturnType(builder, returnTypeOffset);
  return ServiceMethodProto.endServiceMethodProto(builder);
}
}
