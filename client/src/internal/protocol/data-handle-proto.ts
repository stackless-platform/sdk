// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class DataHandleProto {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DataHandleProto {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataHandleProto(bb:flatbuffers.ByteBuffer, obj?:DataHandleProto):DataHandleProto {
  return (obj || new DataHandleProto()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataHandleProto(bb:flatbuffers.ByteBuffer, obj?:DataHandleProto):DataHandleProto {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataHandleProto()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

classId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

objectVersion():flatbuffers.Long {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
}

primaryKey():string|null
primaryKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
primaryKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDataHandleProto(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addClassId(builder:flatbuffers.Builder, classId:number) {
  builder.addFieldInt16(0, classId, 0);
}

static addObjectVersion(builder:flatbuffers.Builder, objectVersion:flatbuffers.Long) {
  builder.addFieldInt64(1, objectVersion, builder.createLong(0, 0));
}

static addPrimaryKey(builder:flatbuffers.Builder, primaryKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, primaryKeyOffset, 0);
}

static endDataHandleProto(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // primary_key
  return offset;
}

static createDataHandleProto(builder:flatbuffers.Builder, classId:number, objectVersion:flatbuffers.Long, primaryKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataHandleProto.startDataHandleProto(builder);
  DataHandleProto.addClassId(builder, classId);
  DataHandleProto.addObjectVersion(builder, objectVersion);
  DataHandleProto.addPrimaryKey(builder, primaryKeyOffset);
  return DataHandleProto.endDataHandleProto(builder);
}
}
